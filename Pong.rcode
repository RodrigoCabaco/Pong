include "headers.h.rcode"
import split
useful_defines()


function regen_ball();{
    float ball_x = screen_width
    float ball_y = screen_height
    ball_x/2
    ball_y/2
    ball_x-2
};

function display_score();{
    int g = screen_width
    g/2
    g-12
    for k in range:g;{
        Write " "
    };
    Write "Score: $score_p2$ - $score_p1$ "
    newln
    g+12
    g-20
    for k in range:g;{
        Write " "
    };
    Write "Press enter to continue playing..."
    $readline
};
function draw_player1(num x,y);{
    for _part in range:l;{
        draw_color(num x = x;;num y = y;;str color = "green")
        ++y;
    };
};
function draw_player2(num x,y,l);{
    for part in range:l;{
        draw_color(num x = x;;num y = y;;str color = "red")
        ++y;
    };
};

function draw_ball(num x,y,l);{
    for __part in range:l;{
        draw_color(num x = x;;num y = y;;str color = "white")
        ++x;
    };
};


function main_loop() => {
    function get_key();{
        str keypressed = $readkey
        if str(keypressed=="Spacebar");{
            gravity_p1*-1
        };
        if str(keypressed=="Enter");{
            gravity_p2*-1
        };
    };
    while str(True=="True");{
        clear()
        if str(keyavailable=="True");{
            get_key()
        };
        
        draw_player1(num x = x1;;num y = y1;;num l = plength)
        draw_player2(num x = x2;;num y = y2;;num l = plength)
        draw_ball(num x = ball_x;;num y = ball_y;;num l = blength)
        y1+gravity_p1
        y2+gravity_p2
        if num(ball_y>=max_y);{
            gravity_y_ball*-1
        };
        if num(ball_y<=min_y);{
            gravity_y_ball*-1
        };
        function on_collision_p1();{
            #if it hits p1
            float gravity_x_ball = init_gravity_x_ball
            gravity_y_ball*-1
        };
        float YY_2 = x1
        YY_2+2
        if num(ball_x<=YY_2);{
            int f = y1
            num to_convert >>f
            numToStr(to_convert)
            str parsed >>""
            getSplit from:to_convert; to:parsed; index:0; separator:".";
            strToNum(parsed)
            num f >>parsed
            num to_convert >>ball_y
            numToStr(to_convert)
            str parsed >>""
            getSplit from:to_convert; to:parsed; index:0; separator:".";
            strToNum(parsed)
            num ball_y >>parsed
            if num(ball_y==f);{
                on_collision_p1()
            };
            ++f;
            if num(ball_y==f);{
                on_collision_p1()
            };
            --f;
        };
        function on_collision_p2();{
            #if it hits p1
            float gravity_x_ball = init_x_negative
            gravity_y_ball*-1
        };
        float YY_2 = x2
        YY_2-2
        if num(ball_x>=YY_2);{
            int f = y2
            num to_convert = f
            numToStr(to_convert)
            str parsed = ""
            getSplit from:to_convert; to:parsed; index:0; separator:".";
            strToNum(parsed)
            num f >>parsed
            num to_convert >>ball_y
            numToStr(to_convert)
            str parsed >>""
            getSplit from:to_convert; to:parsed; index:0; separator:".";
            strToNum(parsed)
            num ball_y >>parsed
            if num(ball_y==f);{
                on_collision_p2()
            };
            ++f;
            if num(ball_y==f);{
                on_collision_p2()
            };
            --f;
        };

        #ball_y+gravity_y_ball
        ball_x+gravity_x_ball
        ball_y+gravity_y_ball
        if num(y2>=max_y);{
            gravity_p2*-1
            y2-offset
        };
        if num(y1>=max_y);{
            gravity_p1*-1
            y1-offset
        };
        if num(y1<=min_y);{
            gravity_p1*-1
            y1+offset
        };
        if num(y2<=min_y);{
            gravity_p2*-1
            y2+offset
        };
       
        
        #check collision with player:

        
        #increment score
        if num(ball_x>=screen_width);{
            ++score_p2;
            display_score()
            float gravity_x_ball = init_x_negative
            float x1 = offset
            float x2 = screen_width
            float y1 = screen_height
            float y2 = screen_height
            y2/2
            y1/2
            x2-offset
            regen_ball()
        };
        if num(ball_x<=0);{
            ++score_p1;
            display_score()
            float gravity_x_ball = init_gravity_x_ball
            float gravity_x_ball = init_x_negative
            float x1 = offset
            float x2 = screen_width
            float y1 = screen_height
            float y2 = screen_height
            y2/2
            y1/2
            x2-offset
            regen_ball()
        };
        #display_score()
        sleep = gravity_speed
    };
};

function main() => {
    #Initialize
    #Player Length
    int plength = 2
    #Ball Length
    int blength = 1
    int max_y = screen_height
    int min_y = 1
    int offset = 3
    int score_p1 = 0
    int score_p2 = 0
    float x1 = offset
    float x2 = screen_width
    float y1 = screen_height
    float y2 = screen_height
    float ball_x = screen_width
    float ball_y = screen_height
    #Players y gravity speed
    float gravity_p1 = 0.8
    float gravity_p2 = 0.8
    float gravity_x_ball = 1
    float init_gravity_x_ball = gravity_x_ball
    float init_x_negative = gravity_x_ball
    float gravity_y_ball = 0.8
    float gravity_speed = 10
    y2/2
    y1/2
    x2-offset
    max_y-min_y
    ball_x/2
    ball_y/2
    ball_x-2
    init_x_negative*-1
    main_loop()
};

main()
exit()
